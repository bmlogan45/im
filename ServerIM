package im;

import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

public class ServerIM extends JFrame{

private JTextField userText;
   private JTextArea chatWindow;
   private ObjectOutputStream output;
   private ObjectInputStream input;
   private ServerSocket server;
   private Socket connection;
   private ArrayList<ClientWorker> chatters;
   

   public static void main(String[] args) {
	      ServerIM sally = new ServerIM();
	      sally.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	      sally.startRunning();
	   }
   
   
   //constructor
   public ServerIM(){
      super("Instant Messenger: Server");
      chatters = new ArrayList<ClientWorker>();
      userText = new JTextField();
      userText.setEditable(false);
      userText.addActionListener(
         new ActionListener(){
            public void actionPerformed(ActionEvent event){
               sendMessage(event.getActionCommand());
               userText.setText("");
            }
         }
      );
      add(userText, BorderLayout.SOUTH);
      chatWindow = new JTextArea();
      add(new JScrollPane(chatWindow));
      setSize(800,600);
      setVisible(true);
   }
   
   //set up and run the server
   public void startRunning(){
      try{
         server = new ServerSocket(6789, 100);
         while(true){
            try{
            	ClientWorker worker;
            	showMessage(" Waiting for clients to connect\n");
            	connection = server.accept();
            	showMessage("creating clientWorker\n");
            	worker = new ClientWorker(connection);
            	showMessage("adding clientWorker to chatter arraylist\n");
            	chatters.add(worker);
            	showMessage("Going into whileChatting()\n");
                whileChatting();
            }catch(EOFException eofException){
               showMessage("\n Server ended the connection! ");
            }catch(IOException e){
            	
            }finally{
               close();
            }
         }
      }catch(IOException ioException){
         ioException.printStackTrace();
      }
   }

//   //wait for connection, then display connection information
//   private void waitForConnection() throws IOException{
//      showMessage(" Waiting for someone to connect... \n");
//      connection = server.accept();
//      showMessage(" Now connected to " + connection.getInetAddress().getHostName());
//   }

//   //get stream to send and receive data
//   private void setupStreams() throws IOException{
//      output = new ObjectOutputStream(connection.getOutputStream());
//      output.flush();
//      input = new ObjectInputStream(connection.getInputStream());
//      showMessage("\n Streams are now setup! \n");
//   }

   //during the chat conversation
   private void whileChatting() throws IOException{
       String message = "You are now connected!"; 
       sendMessage(message); 
	   ableToType(true); 
      do{
    	  try{
    		  message = (String) input.readObject();
    		  showMessage("\n" + message); 
    	  }catch(ClassNotFoundException classNotfoundException){
    		  showMessage("\n class not found exception"); 
    	  }
      }while(!message.equals("CLIENT: END"));
   }


   //close streams and sockets after you are done chatting
   private void close(){
      showMessage("\n Closing connections... \n");
      ableToType(false);
      try{
         output.close();
         input.close();
         connection.close();
      }catch(IOException ioException){
         ioException.printStackTrace();
      }
   }

   //send a message to client
   private void sendMessage(String message){
      try{
    	  for(int i = 0; i < chatters.size(); i++){
	         output.writeObject("SERVER: " + message);
	         output.flush();
	         showMessage("\nSERVER: " + message);
    	  }

      }catch(IOException ioException){
         chatWindow.append("\n ERROR: Cannot send message");
      }
   }

   //updates chatWindow
   private void showMessage(final String text){
      SwingUtilities.invokeLater(
         new Runnable(){
            public void run(){
               chatWindow.append(text);
            }
         }
      );
   }

   //let the user type stuff into their box
   private void ableToType(final boolean tof){
      SwingUtilities.invokeLater(
         new Runnable(){
            public void run(){
               userText.setEditable(tof);
            }
         }
      );
   }

}
